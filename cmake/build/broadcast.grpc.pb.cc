// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: broadcast.proto

#include "broadcast.pb.h"
#include "broadcast.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace broadcast {

static const char* Broadcast_method_names[] = {
  "/broadcast.Broadcast/Subscribe",
  "/broadcast.Broadcast/Publish",
};

std::unique_ptr< Broadcast::Stub> Broadcast::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Broadcast::Stub> stub(new Broadcast::Stub(channel, options));
  return stub;
}

Broadcast::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(Broadcast_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Publish_(Broadcast_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::broadcast::Frame>* Broadcast::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::broadcast::Frame>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void Broadcast::Stub::async::Subscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq* request, ::grpc::ClientReadReactor< ::broadcast::Frame>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::broadcast::Frame>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::broadcast::Frame>* Broadcast::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::broadcast::Frame>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::broadcast::Frame>* Broadcast::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::broadcast::Frame>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::broadcast::Frame>* Broadcast::Stub::PublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response) {
  return ::grpc::internal::ClientWriterFactory< ::broadcast::Frame>::Create(channel_.get(), rpcmethod_Publish_, context, response);
}

void Broadcast::Stub::async::Publish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::ClientWriteReactor< ::broadcast::Frame>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::broadcast::Frame>::Create(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::broadcast::Frame>* Broadcast::Stub::AsyncPublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::broadcast::Frame>::Create(channel_.get(), cq, rpcmethod_Publish_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::broadcast::Frame>* Broadcast::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::broadcast::Frame>::Create(channel_.get(), cq, rpcmethod_Publish_, context, response, false, nullptr);
}

Broadcast::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broadcast_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Broadcast::Service, ::broadcast::SubscribeReq, ::broadcast::Frame>(
          [](Broadcast::Service* service,
             ::grpc::ServerContext* ctx,
             const ::broadcast::SubscribeReq* req,
             ::grpc::ServerWriter<::broadcast::Frame>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broadcast_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Broadcast::Service, ::broadcast::Frame, ::broadcast::Ack>(
          [](Broadcast::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::broadcast::Frame>* reader,
             ::broadcast::Ack* resp) {
               return service->Publish(ctx, reader, resp);
             }, this)));
}

Broadcast::Service::~Service() {
}

::grpc::Status Broadcast::Service::Subscribe(::grpc::ServerContext* context, const ::broadcast::SubscribeReq* request, ::grpc::ServerWriter< ::broadcast::Frame>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Broadcast::Service::Publish(::grpc::ServerContext* context, ::grpc::ServerReader< ::broadcast::Frame>* reader, ::broadcast::Ack* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace broadcast

