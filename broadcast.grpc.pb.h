// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: broadcast.proto
#ifndef GRPC_broadcast_2eproto__INCLUDED
#define GRPC_broadcast_2eproto__INCLUDED

#include "broadcast.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace broadcast {

class Broadcast final {
 public:
  static constexpr char const* service_full_name() {
    return "broadcast.Broadcast";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::broadcast::Frame>> Subscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::broadcast::Frame>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::broadcast::Frame>> AsyncSubscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::broadcast::Frame>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::broadcast::Frame>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::broadcast::Frame>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::broadcast::Frame>> Publish(::grpc::ClientContext* context, ::broadcast::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::broadcast::Frame>>(PublishRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::broadcast::Frame>> AsyncPublish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::broadcast::Frame>>(AsyncPublishRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::broadcast::Frame>> PrepareAsyncPublish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::broadcast::Frame>>(PrepareAsyncPublishRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Subscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq* request, ::grpc::ClientReadReactor< ::broadcast::Frame>* reactor) = 0;
      virtual void Publish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::ClientWriteReactor< ::broadcast::Frame>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::broadcast::Frame>* SubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::broadcast::Frame>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::broadcast::Frame>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::broadcast::Frame>* PublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::broadcast::Frame>* AsyncPublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::broadcast::Frame>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::broadcast::Frame>> Subscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::broadcast::Frame>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::broadcast::Frame>> AsyncSubscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::broadcast::Frame>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::broadcast::Frame>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::broadcast::Frame>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::broadcast::Frame>> Publish(::grpc::ClientContext* context, ::broadcast::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::broadcast::Frame>>(PublishRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::broadcast::Frame>> AsyncPublish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::broadcast::Frame>>(AsyncPublishRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::broadcast::Frame>> PrepareAsyncPublish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::broadcast::Frame>>(PrepareAsyncPublishRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::broadcast::SubscribeReq* request, ::grpc::ClientReadReactor< ::broadcast::Frame>* reactor) override;
      void Publish(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::ClientWriteReactor< ::broadcast::Frame>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::broadcast::Frame>* SubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request) override;
    ::grpc::ClientAsyncReader< ::broadcast::Frame>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::broadcast::Frame>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::broadcast::SubscribeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::broadcast::Frame>* PublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response) override;
    ::grpc::ClientAsyncWriter< ::broadcast::Frame>* AsyncPublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::broadcast::Frame>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, ::broadcast::Ack* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::broadcast::SubscribeReq* request, ::grpc::ServerWriter< ::broadcast::Frame>* writer);
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, ::grpc::ServerReader< ::broadcast::Frame>* reader, ::broadcast::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/, ::grpc::ServerWriter< ::broadcast::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::broadcast::SubscribeReq* request, ::grpc::ServerAsyncWriter< ::broadcast::Frame>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::broadcast::Frame>* /*reader*/, ::broadcast::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::broadcast::Ack, ::broadcast::Frame>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<WithAsyncMethod_Publish<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::broadcast::SubscribeReq, ::broadcast::Frame>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::broadcast::SubscribeReq* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/, ::grpc::ServerWriter< ::broadcast::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::broadcast::Frame>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::broadcast::Frame, ::broadcast::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, ::broadcast::Ack* response) { return this->Publish(context, response); }));
    }
    ~WithCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::broadcast::Frame>* /*reader*/, ::broadcast::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::broadcast::Frame>* Publish(
      ::grpc::CallbackServerContext* /*context*/, ::broadcast::Ack* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<WithCallbackMethod_Publish<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/, ::grpc::ServerWriter< ::broadcast::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::broadcast::Frame>* /*reader*/, ::broadcast::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/, ::grpc::ServerWriter< ::broadcast::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Publish() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::broadcast::Frame>* /*reader*/, ::broadcast::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/, ::grpc::ServerWriter< ::broadcast::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->Publish(context, response); }));
    }
    ~WithRawCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::broadcast::Frame>* /*reader*/, ::broadcast::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Publish(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::broadcast::SubscribeReq, ::broadcast::Frame>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::broadcast::SubscribeReq, ::broadcast::Frame>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::broadcast::SubscribeReq* /*request*/, ::grpc::ServerWriter< ::broadcast::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::broadcast::SubscribeReq,::broadcast::Frame>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

}  // namespace broadcast


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_broadcast_2eproto__INCLUDED
